//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "score")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub total: i32,
    pub date: DateTimeUtc,
    pub completed: bool,
    pub highest_streak: i32,
    pub music_id: i32,
    pub breath_average_strength: Option<i32>,
    pub total_close_hits: Option<i32>,
    pub total_great_hits: Option<i32>,
    pub total_ok_hits: Option<i32>,
    pub highest_breathing_duration: Option<i32>,
    pub total_breathing_duration: Option<i32>,
    pub total_early_misses: Option<i32>,
    pub total_misses: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::music::Entity",
        from = "Column::MusicId",
        to = "super::music::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Music,
}

impl Related<super::music::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Music.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
